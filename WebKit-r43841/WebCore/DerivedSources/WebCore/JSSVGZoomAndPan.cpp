/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"


#if ENABLE(SVG)

#include "SVGElement.h"
#include "JSSVGZoomAndPan.h"

#include <wtf/GetPtr.h>

#include "SVGZoomAndPan.h"

#include <runtime/JSNumberCell.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSSVGZoomAndPan);

/* Hash table */

static const HashTableValue JSSVGZoomAndPanTableValues[3] =
{
    { "zoomAndPan", DontDelete, (intptr_t)jsSVGZoomAndPanZoomAndPan, (intptr_t)setJSSVGZoomAndPanZoomAndPan },
    { "constructor", DontEnum|ReadOnly, (intptr_t)jsSVGZoomAndPanConstructor, (intptr_t)0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGZoomAndPanTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 1, JSSVGZoomAndPanTableValues, 0 };
#else
    { 4, 3, JSSVGZoomAndPanTableValues, 0 };
#endif

/* Hash table for constructor */

static const HashTableValue JSSVGZoomAndPanConstructorTableValues[4] =
{
    { "SVG_ZOOMANDPAN_UNKNOWN", DontDelete|ReadOnly, (intptr_t)jsSVGZoomAndPanSVG_ZOOMANDPAN_UNKNOWN, (intptr_t)0 },
    { "SVG_ZOOMANDPAN_DISABLE", DontDelete|ReadOnly, (intptr_t)jsSVGZoomAndPanSVG_ZOOMANDPAN_DISABLE, (intptr_t)0 },
    { "SVG_ZOOMANDPAN_MAGNIFY", DontDelete|ReadOnly, (intptr_t)jsSVGZoomAndPanSVG_ZOOMANDPAN_MAGNIFY, (intptr_t)0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGZoomAndPanConstructorTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 31, JSSVGZoomAndPanConstructorTableValues, 0 };
#else
    { 9, 7, JSSVGZoomAndPanConstructorTableValues, 0 };
#endif

class JSSVGZoomAndPanConstructor : public DOMObject {
public:
    JSSVGZoomAndPanConstructor(ExecState* exec)
        : DOMObject(JSSVGZoomAndPanConstructor::createStructure(exec->lexicalGlobalObject()->objectPrototype()))
    {
        putDirect(exec->propertyNames().prototype, JSSVGZoomAndPanPrototype::self(exec, exec->lexicalGlobalObject()), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    virtual const ClassInfo* classInfo() const { return &s_info; }
    static const ClassInfo s_info;

    static PassRefPtr<Structure> createStructure(JSValue proto) 
    { 
        return Structure::create(proto, TypeInfo(ObjectType, ImplementsHasInstance)); 
    }
};

const ClassInfo JSSVGZoomAndPanConstructor::s_info = { "SVGZoomAndPanConstructor", 0, &JSSVGZoomAndPanConstructorTable, 0 };

bool JSSVGZoomAndPanConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGZoomAndPanConstructor, DOMObject>(exec, &JSSVGZoomAndPanConstructorTable, this, propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSSVGZoomAndPanPrototypeTableValues[4] =
{
    { "SVG_ZOOMANDPAN_UNKNOWN", DontDelete|ReadOnly, (intptr_t)jsSVGZoomAndPanSVG_ZOOMANDPAN_UNKNOWN, (intptr_t)0 },
    { "SVG_ZOOMANDPAN_DISABLE", DontDelete|ReadOnly, (intptr_t)jsSVGZoomAndPanSVG_ZOOMANDPAN_DISABLE, (intptr_t)0 },
    { "SVG_ZOOMANDPAN_MAGNIFY", DontDelete|ReadOnly, (intptr_t)jsSVGZoomAndPanSVG_ZOOMANDPAN_MAGNIFY, (intptr_t)0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSSVGZoomAndPanPrototypeTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 31, JSSVGZoomAndPanPrototypeTableValues, 0 };
#else
    { 9, 7, JSSVGZoomAndPanPrototypeTableValues, 0 };
#endif

const ClassInfo JSSVGZoomAndPanPrototype::s_info = { "SVGZoomAndPanPrototype", 0, &JSSVGZoomAndPanPrototypeTable, 0 };

JSObject* JSSVGZoomAndPanPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGZoomAndPan>(exec, globalObject);
}

bool JSSVGZoomAndPanPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGZoomAndPanPrototype, JSObject>(exec, &JSSVGZoomAndPanPrototypeTable, this, propertyName, slot);
}

const ClassInfo JSSVGZoomAndPan::s_info = { "SVGZoomAndPan", 0, &JSSVGZoomAndPanTable, 0 };

JSSVGZoomAndPan::JSSVGZoomAndPan(PassRefPtr<Structure> structure, PassRefPtr<SVGZoomAndPan> impl, SVGElement* context)
    : DOMObject(structure)
    , m_context(context)
    , m_impl(impl)
{
}

JSSVGZoomAndPan::~JSSVGZoomAndPan()
{
    forgetDOMObject(*Heap::heap(this)->globalData(), m_impl.get());
}

JSObject* JSSVGZoomAndPan::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return new (exec) JSSVGZoomAndPanPrototype(JSSVGZoomAndPanPrototype::createStructure(globalObject->objectPrototype()));
}

bool JSSVGZoomAndPan::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSSVGZoomAndPan, Base>(exec, &JSSVGZoomAndPanTable, this, propertyName, slot);
}

JSValue jsSVGZoomAndPanZoomAndPan(ExecState* exec, const Identifier&, const PropertySlot& slot)
{
    UNUSED_PARAM(exec);
    SVGZoomAndPan* imp = static_cast<SVGZoomAndPan*>(static_cast<JSSVGZoomAndPan*>(asObject(slot.slotBase()))->impl());
    return jsNumber(exec, imp->zoomAndPan());
}

JSValue jsSVGZoomAndPanConstructor(ExecState* exec, const Identifier&, const PropertySlot& slot)
{
    return static_cast<JSSVGZoomAndPan*>(asObject(slot.slotBase()))->getConstructor(exec);
}
void JSSVGZoomAndPan::put(ExecState* exec, const Identifier& propertyName, JSValue value, PutPropertySlot& slot)
{
    lookupPut<JSSVGZoomAndPan, Base>(exec, propertyName, value, &JSSVGZoomAndPanTable, this, slot);
}

void setJSSVGZoomAndPanZoomAndPan(ExecState* exec, JSObject* thisObject, JSValue value)
{
    SVGZoomAndPan* imp = static_cast<SVGZoomAndPan*>(static_cast<JSSVGZoomAndPan*>(thisObject)->impl());
    imp->setZoomAndPan(value.toInt32(exec));
    if (static_cast<JSSVGZoomAndPan*>(thisObject)->context())
        static_cast<JSSVGZoomAndPan*>(thisObject)->context()->svgAttributeChanged(static_cast<JSSVGZoomAndPan*>(thisObject)->impl()->associatedAttributeName());
}

JSValue JSSVGZoomAndPan::getConstructor(ExecState* exec)
{
    return getDOMConstructor<JSSVGZoomAndPanConstructor>(exec);
}

// Constant getters

JSValue jsSVGZoomAndPanSVG_ZOOMANDPAN_UNKNOWN(ExecState* exec, const Identifier&, const PropertySlot&)
{
    return jsNumber(exec, static_cast<int>(0));
}

JSValue jsSVGZoomAndPanSVG_ZOOMANDPAN_DISABLE(ExecState* exec, const Identifier&, const PropertySlot&)
{
    return jsNumber(exec, static_cast<int>(1));
}

JSValue jsSVGZoomAndPanSVG_ZOOMANDPAN_MAGNIFY(ExecState* exec, const Identifier&, const PropertySlot&)
{
    return jsNumber(exec, static_cast<int>(2));
}

JSC::JSValue toJS(JSC::ExecState* exec, SVGZoomAndPan* object, SVGElement* context)
{
    return getDOMObjectWrapper<JSSVGZoomAndPan>(exec, object, context);
}
SVGZoomAndPan* toSVGZoomAndPan(JSC::JSValue value)
{
    return value.isObject(&JSSVGZoomAndPan::s_info) ? static_cast<JSSVGZoomAndPan*>(asObject(value))->impl() : 0;
}

}

#endif // ENABLE(SVG)
