/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#include "JSPositionErrorCallback.h"

#include <wtf/GetPtr.h>

#include "JSPositionError.h"
#include "PositionErrorCallback.h"

#include <runtime/Error.h>
#include <runtime/JSNumberCell.h>

using namespace JSC;

namespace WebCore {

ASSERT_CLASS_FITS_IN_CELL(JSPositionErrorCallback);

/* Hash table */

static const HashTableValue JSPositionErrorCallbackTableValues[2] =
{
    { "constructor", DontEnum|ReadOnly, (intptr_t)jsPositionErrorCallbackConstructor, (intptr_t)0 },
    { 0, 0, 0, 0 }
};

static const HashTable JSPositionErrorCallbackTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 0, JSPositionErrorCallbackTableValues, 0 };
#else
    { 2, 1, JSPositionErrorCallbackTableValues, 0 };
#endif

/* Hash table for constructor */

static const HashTableValue JSPositionErrorCallbackConstructorTableValues[1] =
{
    { 0, 0, 0, 0 }
};

static const HashTable JSPositionErrorCallbackConstructorTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 0, JSPositionErrorCallbackConstructorTableValues, 0 };
#else
    { 1, 0, JSPositionErrorCallbackConstructorTableValues, 0 };
#endif

class JSPositionErrorCallbackConstructor : public DOMObject {
public:
    JSPositionErrorCallbackConstructor(ExecState* exec)
        : DOMObject(JSPositionErrorCallbackConstructor::createStructure(exec->lexicalGlobalObject()->objectPrototype()))
    {
        putDirect(exec->propertyNames().prototype, JSPositionErrorCallbackPrototype::self(exec, exec->lexicalGlobalObject()), None);
    }
    virtual bool getOwnPropertySlot(ExecState*, const Identifier&, PropertySlot&);
    virtual const ClassInfo* classInfo() const { return &s_info; }
    static const ClassInfo s_info;

    static PassRefPtr<Structure> createStructure(JSValue proto) 
    { 
        return Structure::create(proto, TypeInfo(ObjectType, ImplementsHasInstance)); 
    }
};

const ClassInfo JSPositionErrorCallbackConstructor::s_info = { "PositionErrorCallbackConstructor", 0, &JSPositionErrorCallbackConstructorTable, 0 };

bool JSPositionErrorCallbackConstructor::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSPositionErrorCallbackConstructor, DOMObject>(exec, &JSPositionErrorCallbackConstructorTable, this, propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSPositionErrorCallbackPrototypeTableValues[2] =
{
    { "handleEvent", DontDelete|Function, (intptr_t)jsPositionErrorCallbackPrototypeFunctionHandleEvent, (intptr_t)1 },
    { 0, 0, 0, 0 }
};

static const HashTable JSPositionErrorCallbackPrototypeTable =
#if ENABLE(PERFECT_HASH_SIZE)
    { 0, JSPositionErrorCallbackPrototypeTableValues, 0 };
#else
    { 2, 1, JSPositionErrorCallbackPrototypeTableValues, 0 };
#endif

const ClassInfo JSPositionErrorCallbackPrototype::s_info = { "PositionErrorCallbackPrototype", 0, &JSPositionErrorCallbackPrototypeTable, 0 };

JSObject* JSPositionErrorCallbackPrototype::self(ExecState* exec, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSPositionErrorCallback>(exec, globalObject);
}

bool JSPositionErrorCallbackPrototype::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticFunctionSlot<JSObject>(exec, &JSPositionErrorCallbackPrototypeTable, this, propertyName, slot);
}

const ClassInfo JSPositionErrorCallback::s_info = { "PositionErrorCallback", 0, &JSPositionErrorCallbackTable, 0 };

JSPositionErrorCallback::JSPositionErrorCallback(PassRefPtr<Structure> structure, PassRefPtr<PositionErrorCallback> impl)
    : DOMObject(structure)
    , m_impl(impl)
{
}

JSPositionErrorCallback::~JSPositionErrorCallback()
{
    forgetDOMObject(*Heap::heap(this)->globalData(), m_impl.get());
}

JSObject* JSPositionErrorCallback::createPrototype(ExecState* exec, JSGlobalObject* globalObject)
{
    return new (exec) JSPositionErrorCallbackPrototype(JSPositionErrorCallbackPrototype::createStructure(globalObject->objectPrototype()));
}

bool JSPositionErrorCallback::getOwnPropertySlot(ExecState* exec, const Identifier& propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSPositionErrorCallback, Base>(exec, &JSPositionErrorCallbackTable, this, propertyName, slot);
}

JSValue jsPositionErrorCallbackConstructor(ExecState* exec, const Identifier&, const PropertySlot& slot)
{
    return static_cast<JSPositionErrorCallback*>(asObject(slot.slotBase()))->getConstructor(exec);
}
JSValue JSPositionErrorCallback::getConstructor(ExecState* exec)
{
    return getDOMConstructor<JSPositionErrorCallbackConstructor>(exec);
}

JSValue JSC_HOST_CALL jsPositionErrorCallbackPrototypeFunctionHandleEvent(ExecState* exec, JSObject*, JSValue thisValue, const ArgList& args)
{
    UNUSED_PARAM(args);
    if (!thisValue.isObject(&JSPositionErrorCallback::s_info))
        return throwError(exec, TypeError);
    JSPositionErrorCallback* castedThisObj = static_cast<JSPositionErrorCallback*>(asObject(thisValue));
    PositionErrorCallback* imp = static_cast<PositionErrorCallback*>(castedThisObj->impl());
    PositionError* error = toPositionError(args.at(0));

    imp->handleEvent(error);
    return jsUndefined();
}

JSC::JSValue toJS(JSC::ExecState* exec, PositionErrorCallback* object)
{
    return getDOMObjectWrapper<JSPositionErrorCallback>(exec, object);
}
PositionErrorCallback* toPositionErrorCallback(JSC::JSValue value)
{
    return value.isObject(&JSPositionErrorCallback::s_info) ? static_cast<JSPositionErrorCallback*>(asObject(value))->impl() : 0;
}

}
