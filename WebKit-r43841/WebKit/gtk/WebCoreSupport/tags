!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AltKey	EditorClientGtk.cpp	/^static const unsigned AltKey = 1 << 1;$/;"	m	namespace:WebKit	file:
ChromeClient	ChromeClientGtk.cpp	/^ChromeClient::ChromeClient(WebKitWebView* webView)$/;"	f	class:WebKit::ChromeClient
ChromeClient	ChromeClientGtk.h	/^    class ChromeClient : public WebCore::ChromeClient {$/;"	c	namespace:WebKit
ChromeClientGtk_h	ChromeClientGtk.h	21;"	d
ContextMenuClient	ContextMenuClientGtk.cpp	/^ContextMenuClient::ContextMenuClient(WebKitWebView *webView)$/;"	f	class:WebKit::ContextMenuClient
ContextMenuClient	ContextMenuClientGtk.h	/^    class ContextMenuClient : public WebCore::ContextMenuClient$/;"	c	namespace:WebKit
ContextMenuClientGtk_h	ContextMenuClientGtk.h	27;"	d
CtrlKey	EditorClientGtk.cpp	/^static const unsigned CtrlKey = 1 << 0;$/;"	m	namespace:WebKit	file:
DragClient	DragClientGtk.h	/^    class DragClient : public WebCore::DragClient {$/;"	c	namespace:WebKit
DragClientGtk_h	DragClientGtk.h	31;"	d
EditorClient	EditorClientGtk.cpp	/^EditorClient::EditorClient(WebKitWebView* webView)$/;"	f	class:WebKit::EditorClient
EditorClient	EditorClientGtk.h	/^    class EditorClient : public WebCore::EditorClient {$/;"	c	namespace:WebKit
EditorClientGtk_h	EditorClientGtk.h	31;"	d
FrameLoaderClient	FrameLoaderClientGtk.cpp	/^FrameLoaderClient::FrameLoaderClient(WebKitWebFrame* frame)$/;"	f	class:WebKit::FrameLoaderClient
FrameLoaderClient	FrameLoaderClientGtk.h	/^    class FrameLoaderClient : public WebCore::FrameLoaderClient {$/;"	c	namespace:WebKit
FrameLoaderClientGtk_h	FrameLoaderClientGtk.h	31;"	d
GtkUnicodeMenuEntry	ContextMenuClientGtk.cpp	/^} GtkUnicodeMenuEntry;$/;"	t	namespace:WebKit	typeref:struct:WebKit::__anon1	file:
InspectorClient	InspectorClientGtk.cpp	/^InspectorClient::InspectorClient(WebKitWebView* webView)$/;"	f	class:WebKit::InspectorClient
InspectorClient	InspectorClientGtk.h	/^    class InspectorClient : public WebCore::InspectorClient {$/;"	c	namespace:WebKit
InspectorClientGtk_h	InspectorClientGtk.h	30;"	d
KeyDownEntry	EditorClientGtk.cpp	/^struct KeyDownEntry {$/;"	s	namespace:WebKit	file:
KeyPressEntry	EditorClientGtk.cpp	/^struct KeyPressEntry {$/;"	s	namespace:WebKit	file:
PasteboardHelperGtk	PasteboardHelperGtk.h	/^    PasteboardHelperGtk() { }$/;"	f	class:WebKit::PasteboardHelperGtk
PasteboardHelperGtk	PasteboardHelperGtk.h	/^class PasteboardHelperGtk : public PasteboardHelper {$/;"	c	namespace:WebKit
PasteboardHelperGtk_h	PasteboardHelperGtk.h	24;"	d
ShiftKey	EditorClientGtk.cpp	/^static const unsigned ShiftKey = 1 << 2;$/;"	m	namespace:WebKit	file:
WebCore	ContextMenuClientGtk.h	/^namespace WebCore {$/;"	n
WebCore	EditorClientGtk.h	/^namespace WebCore {$/;"	n
WebCore	InspectorClientGtk.h	/^namespace WebCore {$/;"	n
WebKit	ChromeClientGtk.cpp	/^namespace WebKit {$/;"	n	file:
WebKit	ChromeClientGtk.h	/^namespace WebKit {$/;"	n
WebKit	ContextMenuClientGtk.cpp	/^namespace WebKit {$/;"	n	file:
WebKit	ContextMenuClientGtk.h	/^namespace WebKit {$/;"	n
WebKit	DragClientGtk.cpp	/^namespace WebKit {$/;"	n	file:
WebKit	DragClientGtk.h	/^namespace WebKit {$/;"	n
WebKit	EditorClientGtk.cpp	/^namespace WebKit {$/;"	n	file:
WebKit	EditorClientGtk.h	/^namespace WebKit {$/;"	n
WebKit	FrameLoaderClientGtk.cpp	/^namespace WebKit {$/;"	n	file:
WebKit	FrameLoaderClientGtk.h	/^namespace WebKit {$/;"	n
WebKit	InspectorClientGtk.cpp	/^namespace WebKit {$/;"	n	file:
WebKit	InspectorClientGtk.h	/^namespace WebKit {$/;"	n
WebKit	PasteboardHelperGtk.cpp	/^namespace WebKit {$/;"	n	file:
WebKit	PasteboardHelperGtk.h	/^namespace WebKit {$/;"	n
WebKitWebFrame	FrameLoaderClientGtk.h	/^typedef struct _WebKitWebFrame WebKitWebFrame;$/;"	t	typeref:struct:_WebKitWebFrame
WebKitWebView	ChromeClientGtk.h	/^typedef struct _WebKitWebView WebKitWebView;$/;"	t	typeref:struct:_WebKitWebView
WebKitWebView	ContextMenuClientGtk.h	/^typedef struct _WebKitWebView WebKitWebView;$/;"	t	typeref:struct:_WebKitWebView
WebKitWebView	EditorClientGtk.h	/^typedef struct _WebKitWebView WebKitWebView;$/;"	t	typeref:struct:_WebKitWebView
actionMaskForDrag	DragClientGtk.cpp	/^DragDestinationAction DragClient::actionMaskForDrag(DragData*)$/;"	f	class:WebKit::DragClient
addMessageToConsole	ChromeClientGtk.cpp	/^void ChromeClient::addMessageToConsole(WebCore::MessageSource source, WebCore::MessageLevel level, const WebCore::String& message, unsigned int lineNumber, const WebCore::String& sourceId)$/;"	f	class:WebKit::ChromeClient
agentOS	FrameLoaderClientGtk.cpp	/^static String agentOS()$/;"	f	namespace:WebKit
agentPlatform	FrameLoaderClientGtk.cpp	/^static String agentPlatform()$/;"	f	namespace:WebKit
assignIdentifierToInitialRequest	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::assignIdentifierToInitialRequest(unsigned long identifier, DocumentLoader*, const ResourceRequest&)$/;"	f	class:WebKit::FrameLoaderClient
attachWindow	InspectorClientGtk.cpp	/^void InspectorClient::attachWindow()$/;"	f	class:WebKit::InspectorClient
bidi_menu_entries	ContextMenuClientGtk.cpp	/^static const GtkUnicodeMenuEntry bidi_menu_entries[] = {$/;"	m	namespace:WebKit	file:
blockedError	FrameLoaderClientGtk.cpp	/^ResourceError FrameLoaderClient::blockedError(const ResourceRequest& request)$/;"	f	class:WebKit::FrameLoaderClient
canCachePage	FrameLoaderClientGtk.cpp	/^bool FrameLoaderClient::canCachePage() const$/;"	f	class:WebKit::FrameLoaderClient
canHandleRequest	FrameLoaderClientGtk.cpp	/^bool FrameLoaderClient::canHandleRequest(const ResourceRequest&) const$/;"	f	class:WebKit::FrameLoaderClient
canRedo	EditorClientGtk.cpp	/^bool EditorClient::canRedo() const$/;"	f	class:WebKit::EditorClient
canRunBeforeUnloadConfirmPanel	ChromeClientGtk.cpp	/^bool ChromeClient::canRunBeforeUnloadConfirmPanel()$/;"	f	class:WebKit::ChromeClient
canRunModal	ChromeClientGtk.cpp	/^bool ChromeClient::canRunModal()$/;"	f	class:WebKit::ChromeClient
canShowMIMEType	FrameLoaderClientGtk.cpp	/^bool FrameLoaderClient::canShowMIMEType(const String& type) const$/;"	f	class:WebKit::FrameLoaderClient
canTakeFocus	ChromeClientGtk.cpp	/^bool ChromeClient::canTakeFocus(FocusDirection)$/;"	f	class:WebKit::ChromeClient
canUndo	EditorClientGtk.cpp	/^bool EditorClient::canUndo() const$/;"	f	class:WebKit::EditorClient
cancelPolicyCheck	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::cancelPolicyCheck()$/;"	f	class:WebKit::FrameLoaderClient
cancelledError	FrameLoaderClientGtk.cpp	/^ResourceError FrameLoaderClient::cancelledError(const ResourceRequest& request)$/;"	f	class:WebKit::FrameLoaderClient
cannotShowMIMETypeError	FrameLoaderClientGtk.cpp	/^ResourceError FrameLoaderClient::cannotShowMIMETypeError(const ResourceResponse& response)$/;"	f	class:WebKit::FrameLoaderClient
cannotShowURLError	FrameLoaderClientGtk.cpp	/^ResourceError FrameLoaderClient::cannotShowURLError(const ResourceRequest& request)$/;"	f	class:WebKit::FrameLoaderClient
ch	ContextMenuClientGtk.cpp	/^  gunichar ch;$/;"	m	struct:WebKit::__anon1	file:
charCode	EditorClientGtk.cpp	/^    unsigned charCode;$/;"	m	struct:WebKit::KeyPressEntry	file:
checkGrammarOfString	EditorClientGtk.cpp	/^void EditorClient::checkGrammarOfString(const UChar*, int, Vector<GrammarDetail>&, int*, int*)$/;"	f	class:WebKit::EditorClient
checkSpellingOfString	EditorClientGtk.cpp	/^void EditorClient::checkSpellingOfString(const UChar* text, int length, int* misspellingLocation, int* misspellingLength)$/;"	f	class:WebKit::EditorClient
chromeDestroyed	ChromeClientGtk.cpp	/^void ChromeClient::chromeDestroyed()$/;"	f	class:WebKit::ChromeClient
clearUndoRedoOperations	EditorClientGtk.cpp	/^void EditorClient::clearUndoRedoOperations()$/;"	f	class:WebKit::EditorClient
clipboard_clear_contents_cb	EditorClientGtk.cpp	/^static void clipboard_clear_contents_cb(GtkClipboard* clipboard, gpointer data)$/;"	f	namespace:WebKit
clipboard_get_contents_cb	EditorClientGtk.cpp	/^static void clipboard_get_contents_cb(GtkClipboard* clipboard, GtkSelectionData* selection_data, guint info, gpointer data)$/;"	f	namespace:WebKit
closeWindow	InspectorClientGtk.cpp	/^void InspectorClient::closeWindow()$/;"	f	class:WebKit::InspectorClient
closeWindowSoon	ChromeClientGtk.cpp	/^void ChromeClient::closeWindowSoon()$/;"	f	class:WebKit::ChromeClient
committedLoad	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::committedLoad(DocumentLoader* loader, const char* data, int length)$/;"	f	class:WebKit::FrameLoaderClient
composeUserAgent	FrameLoaderClientGtk.cpp	/^static String composeUserAgent()$/;"	f	namespace:WebKit
contentsSizeChanged	ChromeClientGtk.cpp	/^void ChromeClient::contentsSizeChanged(Frame*, const IntSize&) const$/;"	f	class:WebKit::ChromeClient
contextMenuDestroyed	ContextMenuClientGtk.cpp	/^void ContextMenuClient::contextMenuDestroyed()$/;"	f	class:WebKit::ContextMenuClient
contextMenuItemSelected	ContextMenuClientGtk.cpp	/^void ContextMenuClient::contextMenuItemSelected(ContextMenuItem*, const ContextMenu*)$/;"	f	class:WebKit::ContextMenuClient
copyImageToClipboard	ContextMenuClientGtk.cpp	/^void ContextMenuClient::copyImageToClipboard(const HitTestResult&)$/;"	f	class:WebKit::ContextMenuClient
createDocumentLoader	FrameLoaderClientGtk.cpp	/^WTF::PassRefPtr<WebCore::DocumentLoader> FrameLoaderClient::createDocumentLoader(const WebCore::ResourceRequest& request, const SubstituteData& substituteData)$/;"	f	class:WebKit::FrameLoaderClient
createDragImageForLink	DragClientGtk.cpp	/^DragImageRef DragClient::createDragImageForLink(KURL&, const String& label, Frame*)$/;"	f	class:WebKit::DragClient
createFrame	FrameLoaderClientGtk.cpp	/^PassRefPtr<Frame> FrameLoaderClient::createFrame(const KURL& url, const String& name, HTMLFrameOwnerElement* ownerElement,$/;"	f	class:WebKit::FrameLoaderClient
createHTMLParserQuirks	ChromeClientGtk.h	/^        virtual WebCore::HTMLParserQuirks* createHTMLParserQuirks() { return 0; }$/;"	f	class:WebKit::ChromeClient
createJavaAppletWidget	FrameLoaderClientGtk.cpp	/^Widget* FrameLoaderClient::createJavaAppletWidget(const IntSize&, HTMLAppletElement*, const KURL& baseURL,$/;"	f	class:WebKit::FrameLoaderClient
createPage	InspectorClientGtk.cpp	/^Page* InspectorClient::createPage()$/;"	f	class:WebKit::InspectorClient
createPlugin	FrameLoaderClientGtk.cpp	/^Widget* FrameLoaderClient::createPlugin(const IntSize& pluginSize, HTMLPlugInElement* element, const KURL& url, const Vector<String>& paramNames, const Vector<String>& paramValues, const String& mimeType, bool loadManually)$/;"	f	class:WebKit::FrameLoaderClient
createWindow	ChromeClientGtk.cpp	/^Page* ChromeClient::createWindow(Frame* frame, const FrameLoadRequest& frameLoadRequest, const WindowFeatures& coreFeatures)$/;"	f	class:WebKit::ChromeClient
detachWindow	InspectorClientGtk.cpp	/^void InspectorClient::detachWindow()$/;"	f	class:WebKit::InspectorClient
detachedFromParent2	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::detachedFromParent2()$/;"	f	class:WebKit::FrameLoaderClient
detachedFromParent3	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::detachedFromParent3()$/;"	f	class:WebKit::FrameLoaderClient
didBeginEditing	EditorClientGtk.cpp	/^void EditorClient::didBeginEditing()$/;"	f	class:WebKit::EditorClient
didChangeTitle	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::didChangeTitle(DocumentLoader *l)$/;"	f	class:WebKit::FrameLoaderClient
didEndEditing	EditorClientGtk.cpp	/^void EditorClient::didEndEditing()$/;"	f	class:WebKit::EditorClient
didFinishLoad	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::didFinishLoad() {$/;"	f	class:WebKit::FrameLoaderClient
didPerformFirstNavigation	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::didPerformFirstNavigation() const$/;"	f	class:WebKit::FrameLoaderClient
didSetSelectionTypesForPasteboard	EditorClientGtk.cpp	/^void EditorClient::didSetSelectionTypesForPasteboard()$/;"	f	class:WebKit::EditorClient
didWriteSelectionToPasteboard	EditorClientGtk.cpp	/^void EditorClient::didWriteSelectionToPasteboard()$/;"	f	class:WebKit::EditorClient
dispatchCreatePage	FrameLoaderClientGtk.cpp	/^Frame* FrameLoaderClient::dispatchCreatePage()$/;"	f	class:WebKit::FrameLoaderClient
dispatchDecidePolicyForMIMEType	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDecidePolicyForMIMEType(FramePolicyFunction policyFunction, const String& mimeType, const ResourceRequest& resourceRequest)$/;"	f	class:WebKit::FrameLoaderClient
dispatchDecidePolicyForNavigationAction	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDecidePolicyForNavigationAction(FramePolicyFunction policyFunction, const NavigationAction& action, const ResourceRequest& resourceRequest, PassRefPtr<FormState>)$/;"	f	class:WebKit::FrameLoaderClient
dispatchDecidePolicyForNewWindowAction	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDecidePolicyForNewWindowAction(FramePolicyFunction policyFunction, const NavigationAction& action, const ResourceRequest& resourceRequest, PassRefPtr<FormState>, const String& s)$/;"	f	class:WebKit::FrameLoaderClient
dispatchDidCancelAuthenticationChallenge	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDidCancelAuthenticationChallenge(DocumentLoader*, unsigned long  identifier, const AuthenticationChallenge&)$/;"	f	class:WebKit::FrameLoaderClient
dispatchDidCancelClientRedirect	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDidCancelClientRedirect()$/;"	f	class:WebKit::FrameLoaderClient
dispatchDidChangeLocationWithinPage	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDidChangeLocationWithinPage()$/;"	f	class:WebKit::FrameLoaderClient
dispatchDidCommitLoad	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDidCommitLoad()$/;"	f	class:WebKit::FrameLoaderClient
dispatchDidFailLoad	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDidFailLoad(const ResourceError& error)$/;"	f	class:WebKit::FrameLoaderClient
dispatchDidFailLoading	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDidFailLoading(DocumentLoader*, unsigned long identifier, const ResourceError& error)$/;"	f	class:WebKit::FrameLoaderClient
dispatchDidFailProvisionalLoad	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDidFailProvisionalLoad(const ResourceError& error)$/;"	f	class:WebKit::FrameLoaderClient
dispatchDidFinishDocumentLoad	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDidFinishDocumentLoad()$/;"	f	class:WebKit::FrameLoaderClient
dispatchDidFinishLoad	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDidFinishLoad()$/;"	f	class:WebKit::FrameLoaderClient
dispatchDidFinishLoading	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDidFinishLoading(DocumentLoader*, unsigned long identifier)$/;"	f	class:WebKit::FrameLoaderClient
dispatchDidFirstLayout	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDidFirstLayout()$/;"	f	class:WebKit::FrameLoaderClient
dispatchDidFirstVisuallyNonEmptyLayout	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDidFirstVisuallyNonEmptyLayout()$/;"	f	class:WebKit::FrameLoaderClient
dispatchDidHandleOnloadEvents	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDidHandleOnloadEvents()$/;"	f	class:WebKit::FrameLoaderClient
dispatchDidLoadMainResource	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDidLoadMainResource(DocumentLoader*)$/;"	f	class:WebKit::FrameLoaderClient
dispatchDidLoadResourceByXMLHttpRequest	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDidLoadResourceByXMLHttpRequest(unsigned long, const ScriptString&)$/;"	f	class:WebKit::FrameLoaderClient
dispatchDidLoadResourceFromMemoryCache	FrameLoaderClientGtk.cpp	/^bool FrameLoaderClient::dispatchDidLoadResourceFromMemoryCache(DocumentLoader*, const ResourceRequest&, const ResourceResponse&, int length)$/;"	f	class:WebKit::FrameLoaderClient
dispatchDidReceiveAuthenticationChallenge	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDidReceiveAuthenticationChallenge(DocumentLoader*, unsigned long  identifier, const AuthenticationChallenge&)$/;"	f	class:WebKit::FrameLoaderClient
dispatchDidReceiveContentLength	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDidReceiveContentLength(DocumentLoader*, unsigned long identifier, int lengthReceived)$/;"	f	class:WebKit::FrameLoaderClient
dispatchDidReceiveIcon	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDidReceiveIcon()$/;"	f	class:WebKit::FrameLoaderClient
dispatchDidReceiveResponse	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDidReceiveResponse(DocumentLoader*, unsigned long, const ResourceResponse& response)$/;"	f	class:WebKit::FrameLoaderClient
dispatchDidReceiveServerRedirectForProvisionalLoad	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDidReceiveServerRedirectForProvisionalLoad()$/;"	f	class:WebKit::FrameLoaderClient
dispatchDidReceiveTitle	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDidReceiveTitle(const String& title)$/;"	f	class:WebKit::FrameLoaderClient
dispatchDidStartProvisionalLoad	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchDidStartProvisionalLoad()$/;"	f	class:WebKit::FrameLoaderClient
dispatchShow	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchShow()$/;"	f	class:WebKit::FrameLoaderClient
dispatchUnableToImplementPolicy	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchUnableToImplementPolicy(const ResourceError&)$/;"	f	class:WebKit::FrameLoaderClient
dispatchWillClose	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchWillClose()$/;"	f	class:WebKit::FrameLoaderClient
dispatchWillPerformClientRedirect	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchWillPerformClientRedirect(const KURL&, double, double)$/;"	f	class:WebKit::FrameLoaderClient
dispatchWillSendRequest	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchWillSendRequest(DocumentLoader*, unsigned long, ResourceRequest&, const ResourceResponse&)$/;"	f	class:WebKit::FrameLoaderClient
dispatchWillSubmitForm	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::dispatchWillSubmitForm(FramePolicyFunction policyFunction, PassRefPtr<FormState>)$/;"	f	class:WebKit::FrameLoaderClient
doTextFieldCommandFromEvent	EditorClientGtk.cpp	/^bool EditorClient::doTextFieldCommandFromEvent(Element*, KeyboardEvent*)$/;"	f	class:WebKit::EditorClient
documentElementAvailable	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::documentElementAvailable()$/;"	f	class:WebKit::FrameLoaderClient
download	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::download(ResourceHandle* handle, const ResourceRequest& request, const ResourceRequest&, const ResourceResponse& response)$/;"	f	class:WebKit::FrameLoaderClient
downloadURL	ContextMenuClientGtk.cpp	/^void ContextMenuClient::downloadURL(const KURL& url)$/;"	f	class:WebKit::ContextMenuClient
dragControllerDestroyed	DragClientGtk.cpp	/^void DragClient::dragControllerDestroyed()$/;"	f	class:WebKit::DragClient
dragSourceActionMaskForPoint	DragClientGtk.cpp	/^DragSourceAction DragClient::dragSourceActionMaskForPoint(const IntPoint&)$/;"	f	class:WebKit::DragClient
exceededDatabaseQuota	ChromeClientGtk.cpp	/^void ChromeClient::exceededDatabaseQuota(Frame* frame, const String&)$/;"	f	class:WebKit::ChromeClient
fileDoesNotExistError	FrameLoaderClientGtk.cpp	/^ResourceError FrameLoaderClient::fileDoesNotExistError(const ResourceResponse& response)$/;"	f	class:WebKit::FrameLoaderClient
finishedLoading	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::finishedLoading(DocumentLoader* documentLoader)$/;"	f	class:WebKit::FrameLoaderClient
focus	ChromeClientGtk.cpp	/^void ChromeClient::focus()$/;"	f	class:WebKit::ChromeClient
forceLayout	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::forceLayout()$/;"	f	class:WebKit::FrameLoaderClient
forceLayoutForNonHTML	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::forceLayoutForNonHTML()$/;"	f	class:WebKit::FrameLoaderClient
formStateDidChange	ChromeClientGtk.h	/^        virtual void formStateDidChange(const WebCore::Node*) { }$/;"	f	class:WebKit::ChromeClient
frameLoadCompleted	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::frameLoadCompleted()$/;"	f	class:WebKit::FrameLoaderClient
frameLoaderDestroyed	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::frameLoaderDestroyed()$/;"	f	class:WebKit::FrameLoaderClient
generatedMIMETypeForURLScheme	FrameLoaderClientGtk.cpp	/^String FrameLoaderClient::generatedMIMETypeForURLScheme(const String&) const$/;"	f	class:WebKit::FrameLoaderClient
getClipboard	PasteboardHelperGtk.cpp	/^GtkClipboard* PasteboardHelperGtk::getClipboard(Frame* frame) const$/;"	f	class:WebKit::PasteboardHelperGtk
getCopyTargetList	PasteboardHelperGtk.cpp	/^GtkTargetList* PasteboardHelperGtk::getCopyTargetList(Frame* frame) const$/;"	f	class:WebKit::PasteboardHelperGtk
getCurrentTarget	PasteboardHelperGtk.cpp	/^GtkClipboard* PasteboardHelperGtk::getCurrentTarget(Frame* frame) const$/;"	f	class:WebKit::PasteboardHelperGtk
getCustomMenuFromDefaultItems	ContextMenuClientGtk.cpp	/^PlatformMenuDescription ContextMenuClient::getCustomMenuFromDefaultItems(ContextMenu* menu)$/;"	f	class:WebKit::ContextMenuClient
getGuessesForWord	EditorClientGtk.cpp	/^void EditorClient::getGuessesForWord(const String& word, WTF::Vector<String>& guesses)$/;"	f	class:WebKit::EditorClient
getNavigationAction	FrameLoaderClientGtk.cpp	/^static WebKitWebNavigationAction* getNavigationAction(const NavigationAction& action)$/;"	f	namespace:WebKit
getPasteTargetList	PasteboardHelperGtk.cpp	/^GtkTargetList* PasteboardHelperGtk::getPasteTargetList(Frame* frame) const$/;"	f	class:WebKit::PasteboardHelperGtk
getPrimary	PasteboardHelperGtk.cpp	/^GtkClipboard* PasteboardHelperGtk::getPrimary(Frame* frame) const$/;"	f	class:WebKit::PasteboardHelperGtk
handleEditingKeyboardEvent	EditorClientGtk.cpp	/^static bool handleEditingKeyboardEvent(KeyboardEvent* evt)$/;"	f	namespace:WebKit
handleInputMethodKeydown	EditorClientGtk.cpp	/^void EditorClient::handleInputMethodKeydown(KeyboardEvent* event)$/;"	f	class:WebKit::EditorClient
handleKeyboardEvent	EditorClientGtk.cpp	/^void EditorClient::handleKeyboardEvent(KeyboardEvent* event)$/;"	f	class:WebKit::EditorClient
hasWebView	FrameLoaderClientGtk.cpp	/^bool FrameLoaderClient::hasWebView() const$/;"	f	class:WebKit::FrameLoaderClient
hiddenPanels	InspectorClientGtk.cpp	/^String InspectorClient::hiddenPanels()$/;"	f	class:WebKit::InspectorClient
hideHighlight	InspectorClientGtk.cpp	/^void InspectorClient::hideHighlight()$/;"	f	class:WebKit::InspectorClient
highlight	InspectorClientGtk.cpp	/^void InspectorClient::highlight(Node* node)$/;"	f	class:WebKit::InspectorClient
ignoreWordInSpellDocument	EditorClientGtk.cpp	/^void EditorClient::ignoreWordInSpellDocument(const String& text)$/;"	f	class:WebKit::EditorClient
imContextCommitted	EditorClientGtk.cpp	/^static void imContextCommitted(GtkIMContext* context, const gchar* str, EditorClient* client)$/;"	f	namespace:WebKit
imContextPreeditChanged	EditorClientGtk.cpp	/^static void imContextPreeditChanged(GtkIMContext* context, EditorClient* client)$/;"	f	namespace:WebKit
inputMethodsMenuItem	ContextMenuClientGtk.cpp	/^static GtkWidget* inputMethodsMenuItem (WebKitWebView* webView)$/;"	f	namespace:WebKit
insertControlCharacter	ContextMenuClientGtk.cpp	/^static void insertControlCharacter(GtkWidget* widget)$/;"	f	namespace:WebKit
inspectedURLChanged	InspectorClientGtk.cpp	/^void InspectorClient::inspectedURLChanged(const String& newURL)$/;"	f	class:WebKit::InspectorClient
inspectorDestroyed	InspectorClientGtk.cpp	/^void InspectorClient::inspectorDestroyed()$/;"	f	class:WebKit::InspectorClient
interpretKeyEvent	EditorClientGtk.cpp	/^static const char* interpretKeyEvent(const KeyboardEvent* evt)$/;"	f	namespace:WebKit
interruptForPolicyChangeError	FrameLoaderClientGtk.cpp	/^ResourceError FrameLoaderClient::interruptForPolicyChangeError(const ResourceRequest& request)$/;"	f	class:WebKit::FrameLoaderClient
isContinuousSpellCheckingEnabled	EditorClientGtk.cpp	/^bool EditorClient::isContinuousSpellCheckingEnabled()$/;"	f	class:WebKit::EditorClient
isEditable	EditorClientGtk.cpp	/^bool EditorClient::isEditable()$/;"	f	class:WebKit::EditorClient
isGrammarCheckingEnabled	EditorClientGtk.cpp	/^bool EditorClient::isGrammarCheckingEnabled()$/;"	f	class:WebKit::EditorClient
isSelectTrailingWhitespaceEnabled	EditorClientGtk.cpp	/^bool EditorClient::isSelectTrailingWhitespaceEnabled()$/;"	f	class:WebKit::EditorClient
keyDownEntries	EditorClientGtk.cpp	/^static const KeyDownEntry keyDownEntries[] = {$/;"	m	namespace:WebKit	file:
keyPressEntries	EditorClientGtk.cpp	/^static const KeyPressEntry keyPressEntries[] = {$/;"	m	namespace:WebKit	file:
label	ContextMenuClientGtk.cpp	/^  const char *label;$/;"	m	struct:WebKit::__anon1	file:
learnWord	EditorClientGtk.cpp	/^void EditorClient::learnWord(const String& text)$/;"	f	class:WebKit::EditorClient
localizedStringsURL	InspectorClientGtk.cpp	/^String InspectorClient::localizedStringsURL()$/;"	f	class:WebKit::InspectorClient
lookUpInDictionary	ContextMenuClientGtk.cpp	/^void ContextMenuClient::lookUpInDictionary(Frame*)$/;"	f	class:WebKit::ContextMenuClient
m_frame	FrameLoaderClientGtk.h	/^        WebKitWebFrame* m_frame;$/;"	m	class:WebKit::FrameLoaderClient
m_hasSentResponseToPlugin	FrameLoaderClientGtk.h	/^        bool m_hasSentResponseToPlugin;$/;"	m	class:WebKit::FrameLoaderClient
m_hoveredLinkURL	ChromeClientGtk.h	/^        WebCore::KURL m_hoveredLinkURL;$/;"	m	class:WebKit::ChromeClient
m_inspectedWebView	InspectorClientGtk.h	/^        WebKitWebView* m_inspectedWebView;$/;"	m	class:WebKit::InspectorClient
m_pluginView	FrameLoaderClientGtk.h	/^        WebCore::PluginView* m_pluginView;$/;"	m	class:WebKit::FrameLoaderClient
m_policyDecision	FrameLoaderClientGtk.h	/^        WebKitWebPolicyDecision* m_policyDecision;$/;"	m	class:WebKit::FrameLoaderClient
m_response	FrameLoaderClientGtk.h	/^        WebCore::ResourceResponse m_response;$/;"	m	class:WebKit::FrameLoaderClient
m_userAgent	FrameLoaderClientGtk.h	/^        WebCore::String m_userAgent;$/;"	m	class:WebKit::FrameLoaderClient
m_webInspector	InspectorClientGtk.h	/^        WebKitWebInspector* m_webInspector;$/;"	m	class:WebKit::InspectorClient
m_webView	ChromeClientGtk.h	/^        WebKitWebView* m_webView;$/;"	m	class:WebKit::ChromeClient
m_webView	ContextMenuClientGtk.h	/^        WebKitWebView* m_webView;$/;"	m	class:WebKit::ContextMenuClient
m_webView	EditorClientGtk.h	/^        WebKitWebView* m_webView;$/;"	m	class:WebKit::EditorClient
m_webView	InspectorClientGtk.h	/^        WebKitWebView* m_webView;$/;"	m	class:WebKit::InspectorClient
makeRepresentation	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::makeRepresentation(DocumentLoader*)$/;"	f	class:WebKit::FrameLoaderClient
menubarVisible	ChromeClientGtk.cpp	/^bool ChromeClient::menubarVisible()$/;"	f	class:WebKit::ChromeClient
modifiers	EditorClientGtk.cpp	/^    unsigned modifiers;$/;"	m	struct:WebKit::KeyDownEntry	file:
modifiers	EditorClientGtk.cpp	/^    unsigned modifiers;$/;"	m	struct:WebKit::KeyPressEntry	file:
mouseDidMoveOverElement	ChromeClientGtk.cpp	/^void ChromeClient::mouseDidMoveOverElement(const HitTestResult& hit, unsigned modifierFlags)$/;"	f	class:WebKit::ChromeClient
name	EditorClientGtk.cpp	/^    const char* name;$/;"	m	struct:WebKit::KeyDownEntry	file:
name	EditorClientGtk.cpp	/^    const char* name;$/;"	m	struct:WebKit::KeyPressEntry	file:
notifyStatus	FrameLoaderClientGtk.cpp	/^static void notifyStatus(WebKitWebFrame* frame, WebKitLoadStatus loadStatus)$/;"	f	namespace:WebKit
notifyWebViewDestroyed	InspectorClientGtk.cpp	/^static void notifyWebViewDestroyed(WebKitWebView* webView, InspectorClient* inspectorClient)$/;"	f	namespace:WebKit
objectContentType	FrameLoaderClientGtk.cpp	/^ObjectContentType FrameLoaderClient::objectContentType(const KURL& url, const String& mimeType)$/;"	f	class:WebKit::FrameLoaderClient
overrideMediaType	FrameLoaderClientGtk.cpp	/^String FrameLoaderClient::overrideMediaType() const$/;"	f	class:WebKit::FrameLoaderClient
pageDestroyed	EditorClientGtk.cpp	/^void EditorClient::pageDestroyed()$/;"	f	class:WebKit::EditorClient
pageRect	ChromeClientGtk.cpp	/^FloatRect ChromeClient::pageRect()$/;"	f	class:WebKit::ChromeClient
platformWindow	ChromeClientGtk.cpp	/^PlatformWidget ChromeClient::platformWindow() const$/;"	f	class:WebKit::ChromeClient
pluginWillHandleLoadError	FrameLoaderClientGtk.cpp	/^ResourceError FrameLoaderClient::pluginWillHandleLoadError(const ResourceResponse& response)$/;"	f	class:WebKit::FrameLoaderClient
populateSetting	InspectorClientGtk.cpp	/^void InspectorClient::populateSetting(const String& key, InspectorController::Setting& setting)$/;"	f	class:WebKit::InspectorClient
postProgressEstimateChangedNotification	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::postProgressEstimateChangedNotification()$/;"	f	class:WebKit::FrameLoaderClient
postProgressFinishedNotification	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::postProgressFinishedNotification()$/;"	f	class:WebKit::FrameLoaderClient
postProgressStartedNotification	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::postProgressStartedNotification()$/;"	f	class:WebKit::FrameLoaderClient
prepareForDataSourceReplacement	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::prepareForDataSourceReplacement() { notImplemented(); }$/;"	f	class:WebKit::FrameLoaderClient
print	ChromeClientGtk.cpp	/^void ChromeClient::print(Frame* frame)$/;"	f	class:WebKit::ChromeClient
provisionalLoadStarted	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::provisionalLoadStarted()$/;"	f	class:WebKit::FrameLoaderClient
redirectDataToPlugin	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::redirectDataToPlugin(Widget* pluginWidget)$/;"	f	class:WebKit::FrameLoaderClient
redo	EditorClientGtk.cpp	/^void EditorClient::redo()$/;"	f	class:WebKit::EditorClient
registerCommandForRedo	EditorClientGtk.cpp	/^void EditorClient::registerCommandForRedo(WTF::PassRefPtr<WebCore::EditCommand>)$/;"	f	class:WebKit::EditorClient
registerCommandForUndo	EditorClientGtk.cpp	/^void EditorClient::registerCommandForUndo(WTF::PassRefPtr<WebCore::EditCommand>)$/;"	f	class:WebKit::EditorClient
registerForIconNotification	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::registerForIconNotification(bool)$/;"	f	class:WebKit::FrameLoaderClient
removeSetting	InspectorClientGtk.cpp	/^void InspectorClient::removeSetting(const String& key)$/;"	f	class:WebKit::InspectorClient
repaint	ChromeClientGtk.cpp	/^void ChromeClient::repaint(const IntRect& windowRect, bool contentChanged, bool immediate, bool repaintContentOnly)$/;"	f	class:WebKit::ChromeClient
representationExistsForURLScheme	FrameLoaderClientGtk.cpp	/^bool FrameLoaderClient::representationExistsForURLScheme(const String&) const$/;"	f	class:WebKit::FrameLoaderClient
respondToChangedContents	EditorClientGtk.cpp	/^void EditorClient::respondToChangedContents()$/;"	f	class:WebKit::EditorClient
respondToChangedSelection	EditorClientGtk.cpp	/^void EditorClient::respondToChangedSelection()$/;"	f	class:WebKit::EditorClient
restoreViewState	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::restoreViewState()$/;"	f	class:WebKit::FrameLoaderClient
revertToProvisionalState	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::revertToProvisionalState(DocumentLoader*)$/;"	f	class:WebKit::FrameLoaderClient
runBeforeUnloadConfirmPanel	ChromeClientGtk.cpp	/^bool ChromeClient::runBeforeUnloadConfirmPanel(const WebCore::String& message, WebCore::Frame* frame)$/;"	f	class:WebKit::ChromeClient
runJavaScriptAlert	ChromeClientGtk.cpp	/^void ChromeClient::runJavaScriptAlert(Frame* frame, const String& message)$/;"	f	class:WebKit::ChromeClient
runJavaScriptConfirm	ChromeClientGtk.cpp	/^bool ChromeClient::runJavaScriptConfirm(Frame* frame, const String& message)$/;"	f	class:WebKit::ChromeClient
runJavaScriptPrompt	ChromeClientGtk.cpp	/^bool ChromeClient::runJavaScriptPrompt(Frame* frame, const String& message, const String& defaultValue, String& result)$/;"	f	class:WebKit::ChromeClient
runModal	ChromeClientGtk.cpp	/^void ChromeClient::runModal()$/;"	f	class:WebKit::ChromeClient
runOpenPanel	ChromeClientGtk.cpp	/^void ChromeClient::runOpenPanel(Frame*, PassRefPtr<FileChooser> prpFileChooser)$/;"	f	class:WebKit::ChromeClient
savePlatformDataToCachedFrame	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::savePlatformDataToCachedFrame(CachedFrame*)$/;"	f	class:WebKit::FrameLoaderClient
saveViewStateToItem	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::saveViewStateToItem(HistoryItem*)$/;"	f	class:WebKit::FrameLoaderClient
scaleFactor	ChromeClientGtk.cpp	/^float ChromeClient::scaleFactor()$/;"	f	class:WebKit::ChromeClient
screenToWindow	ChromeClientGtk.cpp	/^IntPoint ChromeClient::screenToWindow(const IntPoint& point) const$/;"	f	class:WebKit::ChromeClient
scroll	ChromeClientGtk.cpp	/^void ChromeClient::scroll(const IntSize& delta, const IntRect& rectToScroll, const IntRect& clipRect)$/;"	f	class:WebKit::ChromeClient
scrollbarsVisible	ChromeClientGtk.cpp	/^bool ChromeClient::scrollbarsVisible() {$/;"	f	class:WebKit::ChromeClient
searchWithGoogle	ContextMenuClientGtk.cpp	/^void ContextMenuClient::searchWithGoogle(const Frame*)$/;"	f	class:WebKit::ContextMenuClient
setAttachedWindowHeight	InspectorClientGtk.cpp	/^void InspectorClient::setAttachedWindowHeight(unsigned height)$/;"	f	class:WebKit::InspectorClient
setCopiesOnScroll	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::setCopiesOnScroll()$/;"	f	class:WebKit::FrameLoaderClient
setInputMethodState	EditorClientGtk.cpp	/^void EditorClient::setInputMethodState(bool active)$/;"	f	class:WebKit::EditorClient
setMainDocumentError	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::setMainDocumentError(DocumentLoader*, const ResourceError& error)$/;"	f	class:WebKit::FrameLoaderClient
setMainFrameDocumentReady	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::setMainFrameDocumentReady(bool)$/;"	f	class:WebKit::FrameLoaderClient
setMenubarVisible	ChromeClientGtk.cpp	/^void ChromeClient::setMenubarVisible(bool visible)$/;"	f	class:WebKit::ChromeClient
setResizable	ChromeClientGtk.cpp	/^void ChromeClient::setResizable(bool)$/;"	f	class:WebKit::ChromeClient
setScrollbarsVisible	ChromeClientGtk.cpp	/^void ChromeClient::setScrollbarsVisible(bool visible)$/;"	f	class:WebKit::ChromeClient
setStatusbarText	ChromeClientGtk.cpp	/^void ChromeClient::setStatusbarText(const String& string)$/;"	f	class:WebKit::ChromeClient
setStatusbarVisible	ChromeClientGtk.cpp	/^void ChromeClient::setStatusbarVisible(bool visible)$/;"	f	class:WebKit::ChromeClient
setTitle	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::setTitle(const String& title, const KURL& url)$/;"	f	class:WebKit::FrameLoaderClient
setToolTip	ChromeClientGtk.cpp	/^void ChromeClient::setToolTip(const String& toolTip)$/;"	f	class:WebKit::ChromeClient
setToolbarsVisible	ChromeClientGtk.cpp	/^void ChromeClient::setToolbarsVisible(bool visible)$/;"	f	class:WebKit::ChromeClient
setWindowRect	ChromeClientGtk.cpp	/^void ChromeClient::setWindowRect(const FloatRect& rect)$/;"	f	class:WebKit::ChromeClient
shouldApplyStyle	EditorClientGtk.cpp	/^bool EditorClient::shouldApplyStyle(WebCore::CSSStyleDeclaration*, WebCore::Range*)$/;"	f	class:WebKit::EditorClient
shouldBeginEditing	EditorClientGtk.cpp	/^bool EditorClient::shouldBeginEditing(WebCore::Range*)$/;"	f	class:WebKit::EditorClient
shouldChangeSelectedRange	EditorClientGtk.cpp	/^bool EditorClient::shouldChangeSelectedRange(Range*, Range*, EAffinity, bool)$/;"	f	class:WebKit::EditorClient
shouldDeleteRange	EditorClientGtk.cpp	/^bool EditorClient::shouldDeleteRange(Range*)$/;"	f	class:WebKit::EditorClient
shouldEndEditing	EditorClientGtk.cpp	/^bool EditorClient::shouldEndEditing(WebCore::Range*)$/;"	f	class:WebKit::EditorClient
shouldFallBack	FrameLoaderClientGtk.cpp	/^bool FrameLoaderClient::shouldFallBack(const ResourceError& error)$/;"	f	class:WebKit::FrameLoaderClient
shouldGoToHistoryItem	FrameLoaderClientGtk.cpp	/^bool FrameLoaderClient::shouldGoToHistoryItem(HistoryItem* item) const$/;"	f	class:WebKit::FrameLoaderClient
shouldInsertNode	EditorClientGtk.cpp	/^bool EditorClient::shouldInsertNode(Node*, Range*, EditorInsertAction)$/;"	f	class:WebKit::EditorClient
shouldInsertText	EditorClientGtk.cpp	/^bool EditorClient::shouldInsertText(const String&, Range*, EditorInsertAction)$/;"	f	class:WebKit::EditorClient
shouldInterruptJavaScript	ChromeClientGtk.cpp	/^bool ChromeClient::shouldInterruptJavaScript()$/;"	f	class:WebKit::ChromeClient
shouldMoveRangeAfterDelete	EditorClientGtk.cpp	/^bool EditorClient::shouldMoveRangeAfterDelete(WebCore::Range*, WebCore::Range*)$/;"	f	class:WebKit::EditorClient
shouldShowDeleteInterface	EditorClientGtk.cpp	/^bool EditorClient::shouldShowDeleteInterface(HTMLElement*)$/;"	f	class:WebKit::EditorClient
shouldUseCredentialStorage	FrameLoaderClientGtk.cpp	/^FrameLoaderClient::shouldUseCredentialStorage(DocumentLoader*, unsigned long  identifier)$/;"	f	class:WebKit::FrameLoaderClient
show	ChromeClientGtk.cpp	/^void ChromeClient::show()$/;"	f	class:WebKit::ChromeClient
showSpellingUI	EditorClientGtk.cpp	/^void EditorClient::showSpellingUI(bool)$/;"	f	class:WebKit::EditorClient
showWindow	InspectorClientGtk.cpp	/^void InspectorClient::showWindow()$/;"	f	class:WebKit::InspectorClient
smartInsertDeleteEnabled	EditorClientGtk.cpp	/^bool EditorClient::smartInsertDeleteEnabled()$/;"	f	class:WebKit::EditorClient
speak	ContextMenuClientGtk.cpp	/^void ContextMenuClient::speak(const String&)$/;"	f	class:WebKit::ContextMenuClient
spellCheckerDocumentTag	EditorClientGtk.cpp	/^int EditorClient::spellCheckerDocumentTag()$/;"	f	class:WebKit::EditorClient
spellingUIIsShowing	EditorClientGtk.cpp	/^bool EditorClient::spellingUIIsShowing()$/;"	f	class:WebKit::EditorClient
startDownload	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::startDownload(const ResourceRequest& request)$/;"	f	class:WebKit::FrameLoaderClient
startDrag	DragClientGtk.cpp	/^void DragClient::startDrag(DragImageRef, const IntPoint&, const IntPoint&, Clipboard*, Frame*, bool)$/;"	f	class:WebKit::DragClient
statusbarVisible	ChromeClientGtk.cpp	/^bool ChromeClient::statusbarVisible()$/;"	f	class:WebKit::ChromeClient
stopSpeaking	ContextMenuClientGtk.cpp	/^void ContextMenuClient::stopSpeaking()$/;"	f	class:WebKit::ContextMenuClient
storeSetting	InspectorClientGtk.cpp	/^void InspectorClient::storeSetting(const String& key, const InspectorController::Setting& setting)$/;"	f	class:WebKit::InspectorClient
tabsToLinks	ChromeClientGtk.cpp	/^bool ChromeClient::tabsToLinks() const$/;"	f	class:WebKit::ChromeClient
takeFocus	ChromeClientGtk.cpp	/^void ChromeClient::takeFocus(FocusDirection)$/;"	f	class:WebKit::ChromeClient
textDidChangeInTextArea	EditorClientGtk.cpp	/^void EditorClient::textDidChangeInTextArea(Element*)$/;"	f	class:WebKit::EditorClient
textDidChangeInTextField	EditorClientGtk.cpp	/^void EditorClient::textDidChangeInTextField(Element*)$/;"	f	class:WebKit::EditorClient
textFieldDidBeginEditing	EditorClientGtk.cpp	/^void EditorClient::textFieldDidBeginEditing(Element*)$/;"	f	class:WebKit::EditorClient
textFieldDidEndEditing	EditorClientGtk.cpp	/^void EditorClient::textFieldDidEndEditing(Element*)$/;"	f	class:WebKit::EditorClient
textWillBeDeletedInTextField	EditorClientGtk.cpp	/^void EditorClient::textWillBeDeletedInTextField(Element*)$/;"	f	class:WebKit::EditorClient
toggleContinuousSpellChecking	EditorClientGtk.cpp	/^void EditorClient::toggleContinuousSpellChecking()$/;"	f	class:WebKit::EditorClient
toggleGrammarChecking	EditorClientGtk.cpp	/^void EditorClient::toggleGrammarChecking()$/;"	f	class:WebKit::EditorClient
toolbarsVisible	ChromeClientGtk.cpp	/^bool ChromeClient::toolbarsVisible()$/;"	f	class:WebKit::ChromeClient
transitionToCommittedForNewPage	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::transitionToCommittedForNewPage()$/;"	f	class:WebKit::FrameLoaderClient
transitionToCommittedFromCachedFrame	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::transitionToCommittedFromCachedFrame(CachedFrame*)$/;"	f	class:WebKit::FrameLoaderClient
undo	EditorClientGtk.cpp	/^void EditorClient::undo()$/;"	f	class:WebKit::EditorClient
unfocus	ChromeClientGtk.cpp	/^void ChromeClient::unfocus()$/;"	f	class:WebKit::ChromeClient
unicodeMenuItem	ContextMenuClientGtk.cpp	/^static GtkWidget* unicodeMenuItem(WebKitWebView* webView)$/;"	f	namespace:WebKit
updateGlobalHistory	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::updateGlobalHistory()$/;"	f	class:WebKit::FrameLoaderClient
updateGlobalHistoryRedirectLinks	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::updateGlobalHistoryRedirectLinks()$/;"	f	class:WebKit::FrameLoaderClient
updateSpellingUIWithGrammarString	EditorClientGtk.cpp	/^void EditorClient::updateSpellingUIWithGrammarString(const String&, const GrammarDetail&)$/;"	f	class:WebKit::EditorClient
updateSpellingUIWithMisspelledWord	EditorClientGtk.cpp	/^void EditorClient::updateSpellingUIWithMisspelledWord(const String&)$/;"	f	class:WebKit::EditorClient
userAgent	FrameLoaderClientGtk.cpp	/^String FrameLoaderClient::userAgent(const KURL&)$/;"	f	class:WebKit::FrameLoaderClient
virtualKey	EditorClientGtk.cpp	/^    unsigned virtualKey;$/;"	m	struct:WebKit::KeyDownEntry	file:
webFrame	FrameLoaderClientGtk.h	/^        WebKitWebFrame*  webFrame() const { return m_frame; }$/;"	f	class:WebKit::FrameLoaderClient
webView	ChromeClientGtk.h	/^        WebKitWebView* webView() const { return m_webView; }$/;"	f	class:WebKit::ChromeClient
webViewDestroyed	InspectorClientGtk.cpp	/^void InspectorClient::webViewDestroyed()$/;"	f	class:WebKit::InspectorClient
widgetScreenPosition	ChromeClientGtk.cpp	/^static IntPoint widgetScreenPosition(GtkWidget* widget)$/;"	f	namespace:WebKit
willChangeTitle	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::willChangeTitle(DocumentLoader*)$/;"	f	class:WebKit::FrameLoaderClient
willPerformDragDestinationAction	DragClientGtk.cpp	/^void DragClient::willPerformDragDestinationAction(DragDestinationAction, DragData*)$/;"	f	class:WebKit::DragClient
willPerformDragSourceAction	DragClientGtk.cpp	/^void DragClient::willPerformDragSourceAction(DragSourceAction, const IntPoint&, Clipboard*)$/;"	f	class:WebKit::DragClient
windowObjectCleared	FrameLoaderClientGtk.cpp	/^void FrameLoaderClient::windowObjectCleared()$/;"	f	class:WebKit::FrameLoaderClient
windowRect	ChromeClientGtk.cpp	/^FloatRect ChromeClient::windowRect()$/;"	f	class:WebKit::ChromeClient
windowResizerRect	ChromeClientGtk.cpp	/^IntRect ChromeClient::windowResizerRect() const$/;"	f	class:WebKit::ChromeClient
windowToScreen	ChromeClientGtk.cpp	/^IntRect ChromeClient::windowToScreen(const IntRect& rect) const$/;"	f	class:WebKit::ChromeClient
~EditorClient	EditorClientGtk.cpp	/^EditorClient::~EditorClient()$/;"	f	class:WebKit::EditorClient
~FrameLoaderClient	FrameLoaderClientGtk.cpp	/^FrameLoaderClient::~FrameLoaderClient()$/;"	f	class:WebKit::FrameLoaderClient
