`configure' configures this package to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit
  -q, --quiet, --silent   do not print `checking...' messages
      --cache-file=FILE   cache test results in FILE [disabled]
  -C, --config-cache      alias for `--cache-file=config.cache'
  -n, --no-create         do not create output files
      --srcdir=DIR        find the sources in DIR [configure dir or `..']

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
			  [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
			  [PREFIX]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR           user executables [EPREFIX/bin]
  --sbindir=DIR          system admin executables [EPREFIX/sbin]
  --libexecdir=DIR       program executables [EPREFIX/libexec]
  --sysconfdir=DIR       read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR   modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR    modifiable single-machine data [PREFIX/var]
  --libdir=DIR           object code libraries [EPREFIX/lib]
  --includedir=DIR       C header files [PREFIX/include]
  --oldincludedir=DIR    C header files for non-gcc [/usr/include]
  --datarootdir=DIR      read-only arch.-independent data root [PREFIX/share]
  --datadir=DIR          read-only architecture-independent data [DATAROOTDIR]
  --infodir=DIR          info documentation [DATAROOTDIR/info]
  --localedir=DIR        locale-dependent data [DATAROOTDIR/locale]
  --mandir=DIR           man documentation [DATAROOTDIR/man]
  --docdir=DIR           documentation root [DATAROOTDIR/doc/PACKAGE]
  --htmldir=DIR          html documentation [DOCDIR]
  --dvidir=DIR           dvi documentation [DOCDIR]
  --pdfdir=DIR           pdf documentation [DOCDIR]
  --psdir=DIR            ps documentation [DOCDIR]

Program names:
  --program-prefix=PREFIX            prepend PREFIX to installed program names
  --program-suffix=SUFFIX            append SUFFIX to installed program names
  --program-transform-name=PROGRAM   run sed PROGRAM on installed program names

System types:
  --build=BUILD     configure for building on BUILD [guessed]
  --host=HOST       cross-compile to build programs to run on HOST [BUILD]
  --target=TARGET   configure for building compilers for TARGET [HOST]

Optional Features:
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-maintainer-mode  enable make rules and dependencies not useful
			  (and sometimes confusing) to the casual installer
  --enable-static[=PKGS]  build static libraries [default=no]
  --disable-dependency-tracking  speeds up one-time build
  --enable-dependency-tracking   do not reject slow dependency extractors
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-osx            build with Mac OS X support [default=auto]
  --enable-x11            build with X11 support [default=auto]
  --enable-extra-warnings   enable extra warnings [default=no]
  --enable-profiling        enable profiling support [default=no]
  --enable-debug            enable debugging [default=no]
  --enable-debug-support    enable debugging support [default=yes]
  --enable-trace            enable call tracing [default=no]
  --enable-text             enable text output [default=yes]
  --enable-gettid           enable usage of gettid() [default=yes]
  --enable-network          enable network support [default=yes]
  --enable-multi            enable multi application core [default=no]
  --enable-voodoo           enable Voodoo (network support) [default=no]
  --enable-unique           enable Unique (WM Module) [default=no]
  --enable-mmx              enable MMX support [default=auto]
  --enable-sse              enable SSE support [default=auto]
  --enable-devmem           build with generic /dev/mem support [default=yes]
  --enable-fbdev            build with linux fbdev support [default=auto]
  --enable-sdl              build with SDL support [default=no]
  --enable-vnc              build with VNC support [default=auto]
  --enable-sysfs            build with sysfs support [default=auto]
  --enable-jpeg             build JPEG image provider [default=yes]
  --enable-zlib             use zlib, e.g. for screen shots [default=no]
  --enable-png              build PNG image provider [default=yes]
  --enable-gif              build GIF image/video provider [default=yes]
  --enable-freetype         build FreeType2 font provider [default=yes]
  --enable-video4linux      build Video4Linux video provider [default=yes]
  --enable-video4linux2     build with Video4Linux2 support [default=no]

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-tags[=TAGS]      include additional configurations [automatic]
  --with-gfxdrivers=<list>   compile gfxdrivers in <list>
                               gfxdrivers may be comma separated
                               'all' builds all drivers (default), 'none' builds none
                               Possible gfxdrivers are:
                               ati128, cle266, cyber5k, davinci, ep9x, i810, i830, mach64,
                               matrox, neomagic, nsc, nvidia, omap, radeon, savage, sh7722,
                               sis315, tdfx, unichrome, vmware
  --with-inputdrivers=<list> compile inputdrivers in <list>
                               inputdrivers may be comma separated
                               'all' builds all drivers (default), 'none' builds none
                               Possible inputdrivers are:
                               dbox2remote, dreamboxremote, dynapro, elo-input, gunze, h3600_ts,
                               joystick, keyboard, linuxinput, lirc, mutouch, penmount, ps2mouse,
                               serialmouse, sonypijogdial, tslib, ucb1x00, wm97xx
  --without-software         build without software rendering (can decrease binary size by >100k)
  --with-smooth-scaling      build with smooth software scaling code (can increase binary size by >100k)
  --with-tests               build test programs
  --with-message-size=SIZE   allow fusion messages up to SIZE bytes [default=1024]
  --without-tools            do not build any tools
  --with-sysroot=DIR         search for lib/share et al within DIR at runtime
                               (e.g. when loading modules)

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    C/C++/Objective C preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CCAS        assembler compiler command (defaults to CC)
  CCASFLAGS   assembler compiler flags (defaults to CFLAGS)
  CPP         C preprocessor
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CXXCPP      C++ preprocessor
  F77         Fortran 77 compiler command
  FFLAGS      Fortran 77 compiler flags
  PKG_CONFIG  path to pkg-config utility
  TSLIB_CFLAGS
              C compiler flags for TSLIB, overriding pkg-config
  TSLIB_LIBS  linker flags for TSLIB, overriding pkg-config

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

